apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: api
    app.kubernetes.io/part-of: objectshandler
    app.kubernetes.io/version: latest
  name: objectshandler
  namespace: objectshandler-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api
      app.kubernetes.io/part-of: objectshandler
      app.kubernetes.io/version: latest
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api
        app.kubernetes.io/part-of: objectshandler
        app.kubernetes.io/version: latest
    spec:
      volumes:
        - name: config
          configMap:
            name: objectshandler-backend-dev-config
      containers:
        - env:
          - name: RUST_LOG
            value: debug
          - name: MongoDBPasswd
            valueFrom:
              secretKeyRef:
                key: user-password 
                name: mongodb
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: s3
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: s3
          image: harbor.computational.bio.uni-giessen.de/scienceobjectsdb/rust-server:latest
          name: objectshandler
          imagePullPolicy: Always
          command: [/app/core_server]
          args: ["-c", "/config/config.yaml"]
          volumeMounts:
            - name: config
              mountPath: "/config"
              readOnly: true
          ports:
          - containerPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  name: objectsdb
  namespace: objectshandler-dev
spec:
  selector:
    app.kubernetes.io/name: api
    app.kubernetes.io/part-of: objectshandler
    app.kubernetes.io/version: latest
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: objectsdb
  namespace: objectshandler-dev
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
spec:
  rules:
  - host: api.objectsdb-dev.m1.k8s.computational.bio
    http:
      paths:
      - backend:
          serviceName: objectsdb
          servicePort: 9000
        path: /
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - api.objectsdb-dev.m1.k8s.computational.bio
    secretName: api-objectsdb-dev-private-cert # < cert-manager will store the created certificate in this secret.
---
